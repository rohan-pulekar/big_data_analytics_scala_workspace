package e63.course.assignment6

import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.sql.SQLContext
import org.apache.spark.sql.Row
import org.apache.spark.sql.types.StructType
import org.apache.spark.sql.types.StructField
import org.apache.spark.sql.types.StringType
import org.apache.spark.sql.types.StructField
import org.apache.spark.sql.types.DoubleType
import org.apache.spark.sql.types.LongType
import org.apache.spark.sql.types.IntegerType
import org.apache.spark.sql.types.FloatType

object Problem3 {
  def main(args: Array[String]) {
    
    // set input files
    val ebayFilePath = args(0)
    
    // Create a Spark Configuration
    val sparkConf = new SparkConf().setAppName("Assignment6_Problem3")
      
    // Create a Scala Spark Context.
    val sparkContext = new SparkContext(sparkConf);
    
    // create a sql context
    val sqlContext = new SQLContext(sparkContext)
    
    // import data into an RDD
    val ebayRDD = sparkContext.textFile(ebayFilePath)
    
    // transform the RDD into another RDD made of tuples
    val ebayRDDOfTuples = ebayRDD.map(l => new Tuple9(l.split(",")(0), l.split(",")(1), l.split(",")(2), l.split(",")(3), l.split(",")(4), l.split(",")(5), l.split(",")(6), l.split(",")(7), l.split(",")(8)))
    
    // transform the RDD into RDD of Rows
    val ebayRDDOfRows = ebayRDDOfTuples.map(e => Row(e._1.toLong, e._2.toFloat, e._3.toFloat, e._4, e._5.toInt, e._6.toFloat, e._7.toFloat, e._8, e._9.toInt))
    
    // print first 10 rows to make sure RDDs have been generated correctly
    println("ebayRDDOfRows:")
    ebayRDDOfRows.take(10).foreach(println)
    
    // create schema for ebay.csv file
    val ebaySchema = StructType(StructField("auctionid", LongType, false) ::
     StructField("bid", FloatType, false) ::
     StructField("bidtime", FloatType, false) ::
     StructField("bidder", StringType, false) ::
     StructField("bidderrate", IntegerType, false) ::
     StructField("openbid", FloatType, false) :: 
     StructField("price", FloatType, false) ::
     StructField("item", StringType, false) ::
     StructField("daystolive", IntegerType, false) :: Nil)
     
     // transform the RDD into dataframe with the help of above created schema
     val Auction = sqlContext.createDataFrame(ebayRDDOfRows, ebaySchema)
     
     // print schema of Auction dataframe
     println("Printing Auction dataframe schema")
     Auction.printSchema()
     
     // print first 5 rows of Auction data frame to make sure it is generated correctly
     println("Printing first 5 rows of Auction data frame to make sure data frame is created correctly")
     Auction.select("auctionid", "bid", "bidtime", "bidder", "bidderrate", "openbid", "price", "item", "daystolive").show(5)
     
     println("Below is answer to the question:  How many auctions were held? (in data frame)")
     println(Auction.select("auctionid").distinct().count())
     
     println("Below is answer to the question: 	How many bids were made per item? (in data frame)")
     Auction.groupBy("item").count().show()
          
     println("Below is answer to the question: What's the minimum bid (price) per item? (in data frame)")
     Auction.groupBy("item").min("bid").show()
     
     println("Below is answer to the question: What's the maximum bid (price) per item? (in data frame)")
     Auction.groupBy("item").max("bid").show()

		 println("Below is answer to the question: What's the average bid (price) per item? (in data frame)")
     Auction.groupBy("item").avg("bid").show()
     
     
     val AuctionBidCountDataFrame = Auction.groupBy("item", "auctionid").count()
     
     println("Below is answer to the question: What is the minimum number of bids per item? (in data frame)")
     AuctionBidCountDataFrame.groupBy("item").min("count").show()
     
     println("Below is answer to the question: What is the maximum number of bids per item? (in data frame)")
     AuctionBidCountDataFrame.groupBy("item").max("count").show()
     
     println("Below is answer to the question: What is the average number of bids per item? (in data frame)")
     AuctionBidCountDataFrame.groupBy("item").avg("count").show()

		 println("Below is answer to the question: Show the bids with price > 100  (in data frame)")
		 Auction.filter("bid > 100").show()

     Auction.registerTempTable("Auction_temp_table")
     
     println("Below is answer to the question: How many auctions were held? (in temp sql table)")
     sqlContext.sql("select count(distinct auctionid) from Auction_temp_table").show()
     
     println("Below is answer to the question: How many bids were made per item? (in temp sql table)")
     sqlContext.sql("select item, count(*) as number_of_bids from Auction_temp_table group by item").show()
     
     println("Below is answer to the question: What's the minimum bid (price) per item? (in temp sql table)")
     sqlContext.sql("select item, min(bid) as minimum_bid from Auction_temp_table group by item").show()
     
     println("Below is answer to the question: What's the maximum bid (price) per item? (in temp sql table)")
     sqlContext.sql("select item, max(bid) as maximum_bid from Auction_temp_table group by item").show()
     
     println("Below is answer to the question: What's the average bid (price) per item? (in temp sql table)")
     sqlContext.sql("select item, avg(bid) as average_bid from Auction_temp_table group by item").show()
     
     println("Below is answer to the question: What is the minimum number of bids per item? (in temp sql table)")
     sqlContext.sql("select item, auctionid, count(*) as number_of_bids from Auction_temp_table group by item, auctionid order by item").groupBy("item").min("number_of_bids").show()
     
     println("Below is answer to the question: What is the maximum number of bids per item? (in temp sql table)")
     sqlContext.sql("select item, auctionid, count(*) as number_of_bids from Auction_temp_table group by item, auctionid order by item").groupBy("item").max("number_of_bids").show()
     
     println("Below is answer to the question: What is the average number of bids per item? (in temp sql table)")
     sqlContext.sql("select item, auctionid, count(*) as number_of_bids from Auction_temp_table group by item, auctionid order by item").groupBy("item").avg("number_of_bids").show()
  
     println("Below is answer to the question: Show the bids with price > 100  (in temp sql table)")
     sqlContext.sql("select * from Auction_temp_table where bid>100").show()
  
  }
}